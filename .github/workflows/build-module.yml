name: Create Release on Tag

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: "v${{ matrix.build_env.tag }} - ${{ matrix.build_env.pkgarch }} :: ${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }} build"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_env:
          - tag: "23.05.2"
            pkgarch: aarch64_generic
            target: rockchip
            subtarget: armv8
            vermagic: "7099fd410828098dc6580ac1b9004dcd"

    steps:
      - uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          path: openwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0

      - name: Install Required Libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libpam-dev liblzma-dev libsnmp-dev

      # Загрузка и распаковка SDK
      - name: Download OpenWRT SDK
        run: |
          wget -qO openwrt-sdk.tar.xz 'https://www.dropbox.com/scl/fi/uwwh6ps0uhgxc7ueezfpw/sdk.tar.xz?rlkey=uvf6mjaldpcmhalzjdjzo19qf&st=ept3ldyp&dl=0'
          mkdir openwrt_sdk
          tar -xvf openwrt-sdk.tar.xz -C openwrt_sdk

      # Загрузка и распаковка Toolchain
      - name: Download OpenWRT Toolchain
        run: |
          wget -qO openwrt-toolchain.tar.xz 'https://www.dropbox.com/scl/fi/kblmt99x2spke4ohw913c/toolchain.tar.xz?rlkey=umhh1zculao639s6vldieecuk&st=1db2uey3&dl=0'
          mkdir openwrt_toolchain
          tar -xvf openwrt-toolchain.tar.xz -C openwrt_toolchain

      # Установка переменных окружения для SDK и Toolchain
      - name: Setup SDK and Toolchain environment
        run: |
          export SDK_PATH=$(pwd)/openwrt_sdk
          export TOOLCHAIN_PATH=$(pwd)/openwrt_toolchain
          export PATH=$TOOLCHAIN_PATH/bin:$PATH
          echo "SDK_PATH=$SDK_PATH" >> $GITHUB_ENV
          echo "TOOLCHAIN_PATH=$TOOLCHAIN_PATH" >> $GITHUB_ENV
          echo "PATH=$TOOLCHAIN_PATH/bin:$PATH" >> $GITHUB_ENV


      - name: Cache Tools and Kernel
        id: cache-tools-kernel
        uses: actions/cache@v4
        env:
          cache-name: "cache-tools-kernel-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }}"
        with:
          path: "**"
          key: ${{ runner.os }}-build-vm4-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-vm4-cache-tools-kernel-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch }}-

      - name: Setup Custom Config
        run: |
          cd openwrt
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config
          make defconfig

      - name: Update and Install Feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Install Build Dependencies
        run: |
          cd openwrt
          make toolchain/install -j$(nproc) V=s

      - name: Building Kernel and Tools
        run: |
          cd openwrt
          echo "pkgarch: ${{ matrix.build_env.pkgarch }}, target: ${{ matrix.build_env.target }}, subtarget: ${{ matrix.build_env.subtarget }}"

          # compile kernel module
          echo "    > make target/linux/compile"
          make target/linux/compile -i -j$(nproc) V=s

          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi

      - name: Build AmneziaWG
        run: |
          cd openwrt
          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          echo "Vermagic: $VERMAGIC"

          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi

          # Ignore kmod build for some targets, replace with the awg-go
          make package/kmod-amneziawg/{clean,download,prepare} V=s || true
          make package/kmod-amneziawg/compile V=s || true

          make package/luci-app-amneziawg/{clean,download,prepare}
          make package/luci-app-amneziawg/compile V=s

          make V=s package/amneziawg-tools/{clean,download,prepare}
          make V=s package/amneziawg-tools/compile

      - name: Prepare Artifacts
        run: |
          cd openwrt
          tag_name=${{ github.ref_name }}
          mkdir -p awgrelease
          postfix="${tag_name}_v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch }}_${{ matrix.build_env.target }}_${{ matrix.build_env.subtarget }}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*.ipk
